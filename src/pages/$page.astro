---
const fs = require('fs');
const readline = require('readline');
const {google} = require('googleapis');

// If modifying these scopes, delete token.json.
const SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly'];
// The file token.json stores the user's access and refresh tokens, and is
// created automatically when the authorization flow completes for the first
// time.
const TOKEN_PATH = 'token.json';

// Load client secrets from a local file.
fs.readFile('secret/credentials.json', (err, content) => {
  if (err) return console.log('Error loading client secret file:', err);
  // Authorize a client with credentials, then call the Google Drive API.
  authorize(JSON.parse(content), listFiles);
});

authorize(credentials, callback) {
  const { client_email, private_key } = credentials;
  const jwtClient = new google.auth.JWT(client_email, null, private_key, SCOPES);

  // Check if we have previously stored a token.
  fs.readFile(TOKEN_PATH, (err, token) => {
    if (err) return this.getAccessToken(jwtClient, callback);
    jwtClient.setCredentials(JSON.parse(token.toString()));
    console.log('Token loaded from file');
    callback(jwtClient);
  });
}

getDoc(id, skipCache = false) {
  return new Promise((resolve, reject) => {
    this.drive.files.export({
      fileId: id,
      mimeType: "text/html",
      fields: "data",
    }, (err, res) => {
      if (err) return reject('The API returned an error: ' + err);
      resolve({ html: this.rewriteToCachedImages(res.data) });
      // Cache images
      this.cacheImages(res.data);
    });
  });
}

getSheet(id, range) {
  return new Promise((resolve, reject) => {
    this.sheets.spreadsheets.values.get({
      spreadsheetId: id,
    range: range,
  }, (err, res) => {
    if (err) reject('The API returned an error: ' + err);
    // console.log(res.data.values);
    const keys = res.data.values[0];
    const transformed = [];
    res.data.values.forEach((row, i) => {
      if(i === 0) return;
      const item = {};
      row.forEach((cell, index) => {
        item[keys[index]] = cell;
      });
       transformed.push(item);
      });
      resolve(transformed);
    });
  });
}

export async function createCollection() {
  // Look up Web Page Directory then make a collection from it.

  /*
    TODO:

    1. [ ] Fetch the Web Page Directory when authorized with
           the Google Service account.
            - https://css-tricks.com/using-google-drive-as-a-cms/
        
    2. [ ] Create pages by fetching page data by their Google ID
           and returning an Astro page.
            - https://docs.astro.build/core-concepts/collections

    3. [ ] Make a few pages by editing the Google Drive Sheet 
           "Web Page Directory".
            - Drive folder: https://drive.google.com/drive/folders/1_ul71uVzQ4BRiDpOMEE5b9T7nYVIjhja?usp=sharing
  

    Notes:
    - Jon has the credentials.json file. Ask him for it.
  */
  const pages = getSheet('1MkpJeQaqu9vd6rEinBY1Hi0bWReKgc0ENYDThMb0NK0', 'A:B')

  console.log('pages', pages)

  const page = await getDoc('1ZgGlcPlt4KJXT_AHiK5WIgjdo8V1PO2rf0PqbWfBiWo')

  console.log('page', page)

  /* fetch collection data here */
  return { /* see examples below */ };
}
---
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{title}</title>
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <link rel="stylesheet" href="/style/global.css">
  <link href="https://unpkg.com/@umich-lib/css@v1/dist/umich-lib.css" rel="stylesheet"/>
<script type="module" src="https://unpkg.com/@umich-lib/components@v1/dist/umich-lib/umich-lib.esm.js"></script>
<script nomodule src="https://unpkg.com/@umich-lib/components@v1/dist/umich-lib/umich-lib.js"></script>
</head>
<body>
  <m-universal-header></m-universal-header>
  <m-website-header name="Design System"></m-website-header>
  <main>
   <p>This is a placeholder. Soon it will be generated pages from the Google Drive CMS idea.</p>
  </main>
</body>
</html>
